name: build-luci-app-nodemanager
'on': { workflow_dispatch: {} }

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target:
          #- name: mediatek-filogic
          #  sdk: https://downloads.openwrt.org/releases/24.10.2/targets/mediatek/filogic/openwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          - name: x86-64
            sdk: https://downloads.openwrt.org/releases/24.10.2/targets/x86/64/openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - uses: actions/checkout@v4

      - name: Install host deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gawk unzip zstd rsync file curl gcc \
            cmake ninja-build pkg-config python3

      - name: Download & extract SDK
        run: |
          set -e
          curl -L --fail -o sdk.tar.zst "${{ matrix.target.sdk }}"
          tar -I zstd -xf sdk.tar.zst
          SDK_DIR="$(tar -I zstd -tf sdk.tar.zst | head -1 | cut -d/ -f1)"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"
          ln -s "$SDK_DIR" sdk

      - name: Setup feeds (luci + packages, openwrt-24.10)
        run: |
          set -e
          cd "$SDK_DIR"
          BRANCH="openwrt-24.10"
          if [ ! -x scripts/feeds ]; then
            mkdir -p scripts
            curl -fsSL "https://raw.githubusercontent.com/openwrt/openwrt/${BRANCH}/scripts/feeds" -o scripts/feeds
            curl -fsSL "https://raw.githubusercontent.com/openwrt/openwrt/${BRANCH}/scripts/metadata.pm" -o scripts/metadata.pm
            chmod +x scripts/feeds
          fi
          cat > feeds.conf <<EOF
          src-git luci https://github.com/openwrt/luci.git;${BRANCH}
          src-git packages https://github.com/openwrt/packages.git;${BRANCH}
          EOF
          ./scripts/feeds update luci packages
          ./scripts/feeds install -p luci luci-base luci-compat || true
          # 先把 lua 相关的 package 领到本地（不同分支名字不同，逐个尝试即可）
          ./scripts/feeds install -p packages lua     || true
          ./scripts/feeds/ install -p packages lua5.3 || true
          ./scripts/feeds install -p packages lua5.4  || true

      - name: Seed .config & defconfig
        run: |
          set -e
          cd "$SDK_DIR"
          cat > .config <<'EOF'
          CONFIG_PACKAGE_luci-app-nodemanager=y
          CONFIG_PACKAGE_luci-i18n-nodemanager-zh-cn=y
          EOF
          make defconfig

      - name: Put our package into SDK
        run: |
          set -e
          cd "$GITHUB_WORKSPACE"
          PKGROOT="$GITHUB_WORKSPACE/$SDK_DIR/package/luci-app-nodemanager"
          rm -rf "$PKGROOT" && mkdir -p "$PKGROOT"
          tar -cf - \
            --exclude='./.git' \
            --exclude="./$SDK_DIR" \
            --exclude='./sdk' \
            . | tar -C "$PKGROOT" -xf -

      - name: Build po2lmo (LuCI official src)
        run: |
          set -e
          cd "$SDK_DIR"
          test -d feeds/luci/modules/luci-base/src || { echo "::error::luci-base src not found"; exit 1; }
          make -C feeds/luci/modules/luci-base/src clean po2lmo V=sc
          install -D -m0755 feeds/luci/modules/luci-base/src/po2lmo staging_dir/host/bin/po2lmo
          install -D -m0755 feeds/luci/modules/luci-base/src/po2lmo staging_dir/hostpkg/bin/po2lmo
          echo "PATH=$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH" >> "$GITHUB_ENV"
          echo "PO2LMO=$PWD/staging_dir/hostpkg/bin/po2lmo" >> "$GITHUB_ENV"

      - name: Build target Lua (auto-detect paths; put lua.h into staging)
        run: |
          set -e
          cd "$SDK_DIR"
          # 候选路径（核心树与 feeds 的多种常见位置）
          CANDIDATES="
          package/lang/lua
          package/libs/lua
          package/utils/lua
          feeds/packages/lang/lua
          feeds/packages/lang/lua5.3
          feeds/packages/lang/lua5.4
          feeds/packages/libs/lua
          feeds/packages/utils/lua
          "
          built=""
          for P in $CANDIDATES; do
            [ -f "$P/Makefile" ] || continue
            if [[ "$P" == feeds/* ]]; then
              TGT="package/feeds/${P#feeds/}/compile"
            else
              TGT="$P/compile"
            fi
            echo "::group::Build $P -> make $TGT"
            make -j"$(nproc)" V=sc "$TGT" && built="yes"
            echo "::endgroup::"
            [ -n "$built" ] && break
          done
          if [ -z "$built" ]; then
            echo "::error::Lua package not found in core or feeds; cannot provide lua.h for lucihttp"
            echo "Tree hint:"
            ls -al package/lang/ 2>/dev/null || true
            ls -al package/libs/ 2>/dev/null || true
            ls -al package/utils/ 2>/dev/null || true
            ls -al feeds/packages/lang/ 2>/dev/null || true
            ls -al feeds/packages/libs/ 2>/dev/null || true
            ls -al feeds/packages/utils/ 2>/dev/null || true
            exit 1
          fi

      - name: Build app + zh-cn i18n
        run: |
          set -e
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          export PO2LMO="${PO2LMO:-$PWD/staging_dir/hostpkg/bin/po2lmo}"
          # 有些 SDK 会顺带触发 lucihttp，此时因为 lua.h 已在，能通过
          make -j1 V=s package/luci-app-nodemanager/compile
          make -j1 V=s package/luci-i18n-nodemanager-zh-cn/compile || \
          make -j1 V=s package/feeds/luci/luci-i18n-nodemanager-zh-cn/compile

      - name: Collect artifacts
        run: |
          set -e
          cd "$SDK_DIR"
          OUT="$GITHUB_WORKSPACE/out/${{ matrix.target.name }}"
          mkdir -p "$OUT"
          find bin/packages -type f -name 'luci-app-nodemanager_*.ipk' -exec cp -v '{}' "$OUT/" \;
          find bin/packages -type f -name 'luci-i18n-nodemanager-zh-cn_*.ipk' -exec cp -v '{}' "$OUT/" \;

      - uses: actions/upload-artifact@v4
        with:
          name: luci-app-nodemanager-${{ matrix.target.name }}
          path: out/${{ matrix.target.name }}/*.ipk
          if-no-files-found: error
