name: Build luci-app-nodemanager (OpenWrt SDK 24.10.2 x86_64)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - '**/*'

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      SDK_VERSION: "24.10.2"
      TARGET: "x86"
      SUBTARGET: "64"
      TOOLCHAIN: "gcc-13.3.0"
      LIBC: "musl"
      PACKAGE_NAME: "luci-app-nodemanager"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute SDK names
        id: names
        run: |
          set -euo pipefail
          SDK_BASE="openwrt-sdk-${SDK_VERSION}-${TARGET}-${SUBTARGET}_${TOOLCHAIN}_${LIBC}.Linux-x86_64"
          echo "SDK_BASE=${SDK_BASE}" >> "$GITHUB_OUTPUT"
          echo "SDK_DIR=${SDK_BASE}"   >> "$GITHUB_OUTPUT"

      - name: Download OpenWrt SDK
        run: |
          set -euo pipefail
          URL="https://downloads.openwrt.org/releases/${SDK_VERSION}/targets/${TARGET}/${SUBTARGET}/${{ steps.names.outputs.SDK_BASE }}.tar.zst"
          echo "Downloading: $URL"
          curl -fL --retry 5 --connect-timeout 20 -o sdk.tar.zst "$URL"
          tar -I zstd -xf sdk.tar.zst

      - name: Prepare package inside SDK
        run: |
          set -euo pipefail
          SDK_DIR="${{ steps.names.outputs.SDK_DIR }}"
          mkdir -p "${SDK_DIR}/package/${PACKAGE_NAME}"
          rsync -a --delete --exclude '.git' --exclude '.github' ./ "${SDK_DIR}/package/${PACKAGE_NAME}/"
          # 确保 Makefile 在 package 根：${SDK_DIR}/package/luci-app-nodemanager/Makefile
          test -f "${SDK_DIR}/package/${PACKAGE_NAME}/Makefile"

      - name: Setup feeds
        working-directory: ${{ steps.names.outputs.SDK_DIR }}
        run: |
          set -euo pipefail
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Ensure host tools (po2lmo/jsmin)
        working-directory: ${{ steps.names.outputs.SDK_DIR }}
        run: |
          set -euo pipefail
          make package/feeds/luci/luci-base/host-compile V=s

      - name: Configure SDK (.config)
        working-directory: ${{ steps.names.outputs.SDK_DIR }}
        run: |
          set -euo pipefail
          # 最小化开启：把我们的包设为可编译 (=m)；打开中文/英文语言包；如用到旧 Lua API，也带上 luci-compat
          {
            echo "CONFIG_PACKAGE_${PACKAGE_NAME}=m"
            echo "CONFIG_LUCI_LANG_en=y"
            echo "CONFIG_LUCI_LANG_zh_Hans=y"
            echo "CONFIG_PACKAGE_luci-compat=m"
          } >> .config
          make defconfig
          echo "==== diffconfig ===="
          ./scripts/diffconfig.sh || true

      - name: Build our package only
        working-directory: ${{ steps.names.outputs.SDK_DIR }}
        env:
          # 让 po2lmo/jsmin 等在 PATH 里
          PATH: ${{ steps.names.outputs.SDK_DIR }}/staging_dir/hostpkg/bin:${{ steps.names.outputs.SDK_DIR }}/staging_dir/host/bin:${{ env.PATH }}
          PO2LMO: ${{ steps.names.outputs.SDK_DIR }}/staging_dir/hostpkg/bin/po2lmo
        run: |
          set -euo pipefail
          echo "Using PO2LMO: ${PO2LMO}"
          make -j"$(nproc)" V=s package/${PACKAGE_NAME}/compile

      - name: List built IPKs
        working-directory: ${{ steps.names.outputs.SDK_DIR }}
        run: |
          set -euo pipefail
          echo "::group::IPKs under bin/"
          # 24.10 的 i18n 包名通常是 zh-cn，这里两种写法都找
          find bin -type f \( -name "${PACKAGE_NAME}_*.ipk" -o -name "luci-i18n-nodemanager-zh-cn_*.ipk" -o -name "luci-i18n-nodemanager-zh-hans_*.ipk" \) -print || true
          echo "::endgroup::"
          # 若未找到则报错以终止
          if ! find bin -type f \( -name "${PACKAGE_NAME}_*.ipk" -o -name "luci-i18n-nodemanager-zh-cn_*.ipk" -o -name "luci-i18n-nodemanager-zh-hans_*.ipk" \) | grep -q .; then
            echo "ERROR: No IPK produced. Check compile log above."
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipks-${{ steps.names.outputs.SDK_DIR }}
          path: |
            ${{ steps.names.outputs.SDK_DIR }}/bin/**/*.ipk
          if-no-files-found: error
