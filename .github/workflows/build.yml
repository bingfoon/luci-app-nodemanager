name: build-luci-app-nodemanager
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target:
          #- name: mediatek-filogic
          #  sdk: https://downloads.openwrt.org/releases/24.10.2/targets/mediatek/filogic/openwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          - name: x86-64
            sdk: https://downloads.openwrt.org/releases/24.10.2/targets/x86/64/openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install minimal deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gawk unzip zstd rsync file curl gcc

      - name: Download & extract SDK
        run: |
          set -e
          curl -L --fail -o sdk.tar.zst "${{ matrix.target.sdk }}"
          tar -I zstd -xf sdk.tar.zst
          SDK_DIR="$(tar -I zstd -tf sdk.tar.zst | head -1 | cut -d/ -f1)"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"
          ln -s "$SDK_DIR" sdk

      - name: Setup feeds (openwrt-24.10)
        run: |
          set -e
          cd "$SDK_DIR"
          BRANCH="openwrt-24.10"
          if [ ! -x scripts/feeds ]; then
            mkdir -p scripts
            curl -fsSL "https://raw.githubusercontent.com/openwrt/openwrt/${BRANCH}/scripts/feeds" -o scripts/feeds
            curl -fsSL "https://raw.githubusercontent.com/openwrt/openwrt/${BRANCH}/scripts/metadata.pm" -o scripts/metadata.pm
            chmod +x scripts/feeds
          fi
          cat > feeds.conf <<'EOF'
          src-git luci https://github.com/openwrt/luci.git;openwrt-24.10
          # 预留 core（需要时可启用）；本流程不强制编译其包，避免引入额外失败点
          src-git core https://github.com/openwrt/openwrt.git;openwrt-24.10
          EOF
          ./scripts/feeds update luci core
          ./scripts/feeds install -p luci luci-base luci-compat

      - name: Remove lucihttp family to avoid lua/meson/ninja deps
        run: |
          set -e
          cd "$SDK_DIR"
          rm -rf feeds/luci/contrib/package/lucihttp || true

      - name: Initialize toolchain defconfig (no world packages)
        run: |
          set -e
          cd "$SDK_DIR"
          : > .config
          make defconfig

      - name: Copy our package into SDK
        run: |
          set -e
          cd "$GITHUB_WORKSPACE"
          PKGROOT="$GITHUB_WORKSPACE/$SDK_DIR/package/luci-app-nodemanager"
          rm -rf "$PKGROOT"; mkdir -p "$PKGROOT"
          rsync -a --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'sdk' \
            --exclude "$SDK_DIR" \
            ./ "$PKGROOT/"

      - name: Normalize package layout (auto-fix nested dir)
        run: |
          set -e
          cd "$SDK_DIR/package"
          if [ ! -f luci-app-nodemanager/Makefile ]; then
            if [ -f luci-app-nodemanager/luci-app-nodemanager/Makefile ]; then
              echo "Flatten nested luci-app-nodemanager/..."
              rsync -a luci-app-nodemanager/luci-app-nodemanager/ luci-app-nodemanager/
              rm -rf luci-app-nodemanager/luci-app-nodemanager
            else
              echo "::error::Makefile not found in package/luci-app-nodemanager"
              find luci-app-nodemanager -maxdepth 3 -type f -name 'Makefile' -print || true
              exit 1
            fi
          fi
          echo "== package tree =="
          find luci-app-nodemanager -maxdepth 2 -type f -print

      - name: Build po2lmo (host tool; required for zh-cn)
        run: |
          set -e
          cd "$SDK_DIR"
          test -d feeds/luci/modules/luci-base/src || { echo "::error::luci-base src not found"; exit 1; }
          make -C feeds/luci/modules/luci-base/src clean po2lmo V=sc
          install -D -m0755 feeds/luci/modules/luci-base/src/po2lmo staging_dir/host/bin/po2lmo
          install -D -m0755 feeds/luci/modules/luci-base/src/po2lmo staging_dir/hostpkg/bin/po2lmo
          echo "PATH=$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH" >> "$GITHUB_ENV"
          echo "PO2LMO=$PWD/staging_dir/hostpkg/bin/po2lmo" >> "$GITHUB_ENV"

      - name: Compile ONLY our package (and its i18n subpackages)
        run: |
          set -e
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          export PO2LMO="${PO2LMO:-$PWD/staging_dir/hostpkg/bin/po2lmo}"
          make -j"$(nproc)" V=s package/luci-app-nodemanager/compile
          make -j1 V=s package/luci-app-nodemanager/install
          echo "::group::IPK list"
          find bin -type f -name 'luci-app-nodemanager_*.ipk' -o -name 'luci-i18n-nodemanager-zh-cn_*.ipk' -print
          echo "::endgroup::"

      - name: Collect artifacts (robust)
        run: |
          set -e
          cd "$SDK_DIR"
          OUT="$GITHUB_WORKSPACE/out/${{ matrix.target.name }}"
          mkdir -p "$OUT"
          found=0
          while IFS= read -r -d '' f; do cp -v "$f" "$OUT/"; found=1; done < <(find bin -type f -name 'luci-app-nodemanager_*.ipk' -print0)
          while IFS= read -r -d '' f; do cp -v "$f" "$OUT/"; found=1; done < <(find bin -type f -name 'luci-i18n-nodemanager-zh-cn_*.ipk' -print0)
          if [ "$found" -eq 0 ]; then
            echo "::error::No luci-app-nodemanager ipk found under bin/"
            find bin -maxdepth 5 -type f -name '*.ipk' -print
            exit 1
          fi
          ls -l "$OUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-nodemanager-${{ matrix.target.name }}
          path: out/${{ matrix.target.name }}
          if-no-files-found: error
