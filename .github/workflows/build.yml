name: build-luci-app-nodemanager
'on':
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TERM: xterm

    strategy:
      fail-fast: false
      matrix:
        target:
          - name: mediatek-filogic
            sdk: https://downloads.openwrt.org/releases/24.10.2/targets/mediatek/filogic/openwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          - name: x86-64
            sdk: https://downloads.openwrt.org/releases/24.10.2/targets/x86/64/openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps (incl. meson/ninja/pkg-config/python3)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gawk unzip libncurses5-dev zstd rsync file curl gcc \
            ninja-build meson pkg-config python3

      - name: Download & extract SDK
        run: |
          set -e
          curl -L --fail -o sdk.tar.zst "${{ matrix.target.sdk }}"
          tar -I zstd -xf sdk.tar.zst
          SDK_DIR="$(tar -I zstd -tf sdk.tar.zst | head -1 | cut -d/ -f1)"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"
          ln -s "$SDK_DIR" sdk

      - name: Setup feeds (luci only, openwrt-24.10)
        run: |
          set -e
          cd "$SDK_DIR"
          BRANCH="openwrt-24.10"
          if [ ! -x scripts/feeds ]; then
            mkdir -p scripts
            curl -fsSL "https://raw.githubusercontent.com/openwrt/openwrt/${BRANCH}/scripts/feeds" -o scripts/feeds
            curl -fsSL "https://raw.githubusercontent.com/openwrt/openwrt/${BRANCH}/scripts/metadata.pm" -o scripts/metadata.pm
            chmod +x scripts/feeds
          fi
          echo "src-git luci https://github.com/openwrt/luci.git;${BRANCH}" > feeds.conf
          ./scripts/feeds update luci
          ./scripts/feeds install -p luci luci-base luci-compat

      - name: Seed .config & defconfig
        run: |
          set -e
          cd "$SDK_DIR"
          cat >> .config <<'EOF'
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_PACKAGE_luci-app-nodemanager=y
          CONFIG_PACKAGE_luci-i18n-nodemanager-zh-cn=y
          EOF
          make defconfig

      - name: Put our package into SDK (safe copy)
        run: |
          set -e
          cd "$GITHUB_WORKSPACE"
          PKGROOT="$GITHUB_WORKSPACE/$SDK_DIR/package/luci-app-nodemanager"
          rm -rf "$PKGROOT"
          mkdir -p "$PKGROOT"
          tar -cf - \
            --exclude='./.git' \
            --exclude="./$SDK_DIR" \
            --exclude='./sdk' \
            . \
          | tar -C "$PKGROOT" -xf -

      - name: Build po2lmo (via luci src Makefile -> host+hostpkg)
        run: |
          set -e
          cd "$SDK_DIR"
          test -d feeds/luci/modules/luci-base/src || { echo "::error::luci-base src not found"; exit 1; }
          make -C feeds/luci/modules/luci-base/src clean po2lmo V=sc
          install -D -m0755 feeds/luci/modules/luci-base/src/po2lmo staging_dir/host/bin/po2lmo
          install -D -m0755 feeds/luci/modules/luci-base/src/po2lmo staging_dir/hostpkg/bin/po2lmo
          echo "== host bins ==";    ls -l staging_dir/host/bin    || true
          echo "== hostpkg bins =="; ls -l staging_dir/hostpkg/bin || true
          test -x staging_dir/host/bin/po2lmo
          test -x staging_dir/hostpkg/bin/po2lmo
          # 暂不修改 PATH，避免影响后面系统工具定位

      - name: Symlink system tools into staging (idempotent)
        run: |
          set -e
          cd "$SDK_DIR"
          mkdir -p staging_dir/hostpkg/bin staging_dir/host/bin

          # 强制用系统 PATH 找工具，避免命中 staging 里的同名可执行
          SYS_PATH="/usr/sbin:/usr/bin:/sbin:/bin"
          for t in meson ninja pkg-config python3; do
            SYS_BIN="$(env PATH="$SYS_PATH" command -v "$t" || true)"
            [ -x "$SYS_BIN" ] || { echo "::error::system tool $t not found"; exit 1; }

            for dst in "staging_dir/hostpkg/bin/$t" "staging_dir/host/bin/$t"; do
              mkdir -p "$(dirname "$dst")"
              # 若已指向同一真实文件则跳过；否则重建软链
              DST_REAL="$(readlink -f "$dst" 2>/dev/null || echo '')"
              SYS_REAL="$(readlink -f "$SYS_BIN")"
              if [ "$DST_REAL" = "$SYS_REAL" ]; then
                echo "skip linking $dst (already -> $SYS_REAL)"
              else
                rm -f "$dst"
                ln -s "$SYS_BIN" "$dst"
                echo "linked $dst -> $SYS_BIN"
              fi
            done
          done

          # 现在把 staging 放入 PATH 供后续构建使用
          echo "PATH=$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH" >> "$GITHUB_ENV"
          echo "PO2LMO=$PWD/staging_dir/hostpkg/bin/po2lmo" >> "$GITHUB_ENV"

      - name: Prebuild lucihttp (debug-friendly)
        run: |
          set -e
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          set +e
          make -j1 V=s package/feeds/luci/lucihttp/compile
          RET=$?
          set -e
          if [ $RET -ne 0 ]; then
            echo "==== lucihttp build logs (last 200) ===="
            find build_dir -type f -name '*lucihttp*log*' -exec tail -n 200 {} \; || true
            exit $RET
          fi

      - name: Sanity check zh-cn PO domain
        run: |
          set -e
          cd "$SDK_DIR/package/luci-app-nodemanager"
          test -s po/zh-cn/nodemanager.po || { echo "::error::missing po/zh-cn/nodemanager.po (domain must be 'nodemanager')"; exit 1; }

      - name: Build app + zh-cn i18n (force, debug on failure)
        run: |
          set -e
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          export PO2LMO="${PO2LMO:-$PWD/staging_dir/hostpkg/bin/po2lmo}"

          echo "Using po2lmo: $(command -v po2lmo || true)"
          po2lmo -h || true

          set +e
          make -j1 V=s package/luci-app-nodemanager/compile
          RET=$?
          if [ $RET -ne 0 ]; then
            echo "==== DUMP luci-app logs ===="
            find build_dir -type f -name '*luci-app-nodemanager*log*' -exec tail -n 200 {} \; || true
            exit $RET
          fi

          make -j1 V=s package/luci-i18n-nodemanager-zh-cn/compile || \
          make -j1 V=s package/feeds/luci/luci-i18n-nodemanager-zh-cn/compile
          RET=$?
          set -e
          if [ $RET -ne 0 ]; then
            echo '==== DUMP i18n logs ===='
            find build_dir -type f -name '*luci-i18n-nodemanager-zh-cn*log*' -exec tail -n 200 {} \; || true
            exit $RET
          fi

      - name: Collect artifacts
        run: |
          set -e
          cd "$SDK_DIR"
          OUT="$GITHUB_WORKSPACE/out/${{ matrix.target.name }}"
          mkdir -p "$OUT"
          find bin/packages -type f -name 'luci-app-nodemanager_*.ipk' -exec cp -v '{}' "$OUT/" \;
          find bin/packages -type f -name 'luci-i18n-nodemanager-zh-cn_*.ipk' -exec cp -v '{}' "$OUT/" \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-nodemanager-${{ matrix.target.name }}
          path: out/${{ matrix.target.name }}/*.ipk
          if-no-files-found: error
